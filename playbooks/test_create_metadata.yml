---
# PSDEV-1108: Playbook for testing creation of metadata resources.
- hosts: localhost
  gather_facts: false  # Required for ansible_date_time
  collections:
    - infinidat.infinibox
  tasks:

    # Test any object_type

    - name: NEGATIVE test -> Attempt to create a volume metadata key without providing a value
      infini_metadata:
        object_type: "vol"
        object_name: "foo"
        key: "foo"
        # value: "bar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot create a' not in metadata_out.msg"
        - "'without providing a value' not in metadata_out.msg"

    - name: NEGATIVE test -> Attempt to create a system metadata key while incorrectly providing an object_name
      infini_metadata:
        object_type: "system"
        object_name: "foo" # Error
        key: "foo"
        value: "bar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'object_name for object_type system must not be provided' not in metadata_out.msg"

    - name: NEGATIVE test -> Attempt to create a volume metadata key without providing a object_name
      infini_metadata:
        object_type: "vol"
        # object_name: "foo"
        key: "foo"
        value: "bar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'The name of the vol must be provided as object_name' not in metadata_out.msg"

    # Test pool object_type

    - name: SETUP test -> Delete pool {{ auto_prefix }}pool to clear any metadata
      infini_pool:
        name: "{{ auto_prefix }}pool"
        state: absent
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: SETUP test -> Create pool {{ auto_prefix }}pool
      infini_pool:
        name: "{{ auto_prefix }}pool"
        size: 1 TB
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Get pool named {{ auto_prefix }}pool's nonexistent metadata key named poolfoo
      infini_metadata:
        object_type: "pool"
        object_name: "{{ auto_prefix }}pool"
        key: "poolfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find pool metadata key' not in metadata_out.msg"

    - name: POSITIVE test -> Create metadata for pool {{ auto_prefix }}pool with key named poolfoo with value poolbar
      infini_metadata:
        object_type: "pool"
        object_name: "{{ auto_prefix }}pool"
        key: "poolfoo"
        value: "poolbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Create metadata for pool {{ auto_prefix }}pool with key named poolfoo with value poolbar again
      infini_metadata:
        object_type: "pool"
        object_name: "{{ auto_prefix }}pool"
        key: "poolfoo"
        value: "poolbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: POSITIVE test -> Stat metadata pool {{ auto_prefix }}pool key named poolfoo
      infini_metadata:
        object_type: "pool"
        object_name: "{{ auto_prefix }}pool"
        key: "poolfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "metadata_out['value'] != 'poolbar' or metadata_out['changed'] != false"

    - name: POSITIVE test -> Delete metadata pool {{ auto_prefix }}pool key named poolfoo
      infini_metadata:
        object_type: "pool"
        object_name: "{{ auto_prefix }}pool"
        key: "poolfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Delete metadata pool {{ auto_prefix }}pool key named poolfoo again
      infini_metadata:
        object_type: "pool"
        object_name: "{{ auto_prefix }}pool"
        key: "poolfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Stat nonexistent metadata pool {{ auto_prefix }}pool key named poolfoo
      infini_metadata:
        object_type: "pool"
        object_name: "{{ auto_prefix }}pool"
        key: "poolfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find pool metadata key' not in metadata_out.msg"

    # Test vol object_type

    - name: SETUP test -> Delete volume {{ auto_prefix }}vol in pool {{ auto_prefix }}pool to clear any metadata
      infini_vol:
        name: "{{ auto_prefix }}vol"
        pool: "{{ auto_prefix }}pool"
        state: absent
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: SETUP test -> Create volume {{ auto_prefix }}vol in pool {{ auto_prefix }}pool
      infini_vol:
        name: "{{ auto_prefix }}vol"
        pool: "{{ auto_prefix }}pool"
        size: 1 GB
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Get volume named {{ auto_prefix }}vol's nonexistent metadata key named volfoo
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find vol metadata key' not in metadata_out.msg"

    - name: POSITIVE test -> Create metadata for volume {{ auto_prefix }}vol with key named volfoo with value volbar
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        value: "volbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Create metadata for volume {{ auto_prefix }}vol with key named volfoo with value volbar again
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        value: "volbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: POSITIVE test -> Stat metadata volume {{ auto_prefix }}vol key named volfoo
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "metadata_out['value'] != 'volbar' or metadata_out['changed'] != false"

    - name: POSITIVE test -> Delete metadata volume {{ auto_prefix }}vol key named volfoo
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Delete metadata volume {{ auto_prefix }}vol key named volfoo again
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Stat nonexistent metadata volume {{ auto_prefix }}vol key named volfoo
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find vol metadata key' not in metadata_out.msg"

    # Test vol-snap object_type

    - name: SETUP test -> Delete volume snapshot {{ auto_prefix }}volsnap in pool {{ auto_prefix }}pool to clear any metadata
      infini_vol:
        name: "{{ auto_prefix }}volsnap"
        pool: "{{ auto_prefix }}pool"
        volume_type: "snapshot"
        state: absent
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Stat nonexistent metadata volume snapshot {{ auto_prefix }}volsnap key named volsnapfoo when snapshot does not exist
      infini_metadata:
        object_type: "vol-snap"
        object_name: "{{ auto_prefix }}volsnap"
        key: "volsnapfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Volume snapshot named' not in metadata_out.msg or 'not found' not in metadata_out.msg"

    - name: SETUP test -> Create volume {{ auto_prefix }}vol in pool {{ auto_prefix }}pool
      infini_vol:
        name: "{{ auto_prefix }}vol"
        pool: "{{ auto_prefix }}pool"
        size: 1 GB
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: SETUP test -> Create volume snapshot {{ auto_prefix }}volsnap in pool {{ auto_prefix }}pool
      infini_vol:
        name: "{{ auto_prefix }}volsnap"
        volume_type: "snapshot"
        parent_volume_name: "{{ auto_prefix }}vol"
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Get volume snapshot named {{ auto_prefix }}vol's nonexistent metadata key named volsnapfoo
      infini_metadata:
        object_type: "vol-snap"
        object_name: "{{ auto_prefix }}volsnap"
        key: "volsnapfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find vol-snap metadata key' not in metadata_out.msg"

    - name: POSITIVE test -> Create metadata for volume snapshot {{ auto_prefix }}volsnap with key named volsnapfoo with value volsnapbar
      infini_metadata:
        object_type: "vol-snap"
        object_name: "{{ auto_prefix }}volsnap"
        key: "volsnapfoo"
        value: "volsnapbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Create metadata for volume snapshot {{ auto_prefix }}volsnap with key named volsnapfoo with value volsnapbar again
      infini_metadata:
        object_type: "vol-snap"
        object_name: "{{ auto_prefix }}volsnap"
        key: "volsnapfoo"
        value: "volsnapbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: POSITIVE test -> Stat metadata volume snapshot {{ auto_prefix }}volsnap key named volsnapfoo
      infini_metadata:
        object_type: "vol-snap"
        object_name: "{{ auto_prefix }}volsnap"
        key: "volsnapfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "metadata_out['value'] != 'volsnapbar' or metadata_out['changed'] != false"

    - name: POSITIVE test -> Delete metadata volume snapshot {{ auto_prefix }}volsnap key named volsnapfoo
      infini_metadata:
        object_type: "vol-snap"
        object_name: "{{ auto_prefix }}volsnap"
        key: "volsnapfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Delete metadata volume snapshot {{ auto_prefix }}volsnap key named volsnapfoo again
      infini_metadata:
        object_type: "vol-snap"
        object_name: "{{ auto_prefix }}volsnap"
        key: "volsnapfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Stat nonexistent metadata volume snapshot {{ auto_prefix }}volsnap key named volsnapfoo
      infini_metadata:
        object_type: "vol-snap"
        object_name: "{{ auto_prefix }}volsnap"
        key: "volsnapfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find vol-snap metadata key' not in metadata_out.msg"

    # - name: SETUP test -> Delete volume snapshot {{ auto_prefix }}volsnap in pool {{ auto_prefix }}pool
    #   infini_vol:
    #     name: "{{ auto_prefix }}volsnap"
    #     pool: "{{ auto_prefix }}pool"
    #     volume_type: "snapshot"
    #     state: absent
    #     user: "{{ user }}"
    #     password: "{{ password }}"
    #     system: "{{ system }}"

    # - name: SETUP test -> Delete volume {{ auto_prefix }}vol in pool {{ auto_prefix }}pool
    #   infini_vol:
    #     name: "{{ auto_prefix }}vol"
    #     pool: "{{ auto_prefix }}pool"
    #     volume_type: "master"
    #     state: absent
    #     user: "{{ user }}"
    #     password: "{{ password }}"
    #     system: "{{ system }}"

    # Test system object_type

    - name: NEGATIVE test -> Attempt to set system metadata key ui-dataset-base2-units to something other than an boolean
      infini_metadata:
        object_type: "system"
        key: "ui-dataset-base2-units"
        value: "bar"  # Should be a boolean
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Value must be of type bool' not in metadata_out.msg"

    - name: POSITIVE test -> Delete metadata system key named sysfoo to clear any metadata
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Get nonexistent system metadata key named sysfoo
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Metadata for system with key sysfoo not found' not in metadata_out.msg"

    - name: POSITIVE test -> Create metadata system key named sysfoo with value sysbar
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        value: "sysbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Create metadata system key named sysfoo with value sysbar again
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        value: "sysbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: POSITIVE test -> Stat metadata system key named sysfoo
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out

    - name: POSITIVE test -> Delete metadata system key named sysfoo
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Delete metadata system key named sysfoo again
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    # Test fs object_type

    - name: SETUP test -> Delete fs {{ auto_prefix }}fs in pool {{ auto_prefix }}pool to clear any metadata
      infini_fs:
        name: "{{ auto_prefix }}fs"
        pool: "{{ auto_prefix }}pool"
        state: absent
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: SETUP test -> Create fs {{ auto_prefix }}fs in pool {{ auto_prefix }}pool
      infini_fs:
        name: "{{ auto_prefix }}fs"
        pool: "{{ auto_prefix }}pool"
        size: 1 GB
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Get fs named {{ auto_prefix }}fs's nonexistent metadata key named fsfoo
      infini_metadata:
        object_type: "fs"
        object_name: "{{ auto_prefix }}fs"
        key: "fsfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find fs metadata key' not in metadata_out.msg"

    - name: POSITIVE test -> Create fs named {{ auto_prefix }}fs's metadata key named fsfoo with value fsbar
      infini_metadata:
        object_type: "fs"
        object_name: "{{ auto_prefix }}fs"
        key: "fsfoo"
        value: "fsbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Create fs named {{ auto_prefix }}fs's metadata key named fsfoo again
      infini_metadata:
        object_type: "fs"
        object_name: "{{ auto_prefix }}fs"
        key: "fsfoo"
        value: "fsbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    # Test fs-snap object_type

    - name: SETUP test -> Delete fs snapshot {{ auto_prefix }}fssnap in pool {{ auto_prefix }}pool to clear any metadata
      infini_fs:
        name: "{{ auto_prefix }}fssnap"
        pool: "{{ auto_prefix }}pool"
        state: absent
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Create fs snapshot {{ auto_prefix }}fsnap of {{ auto_prefix }}fs in pool {{ auto_prefix }}pool but use default fs_type, master, with a parent_fs_name
      infini_fs:
        name: "{{ auto_prefix }}fssnap"
        pool: "{{ auto_prefix }}pool"
        parent_fs_name: "{{ auto_prefix }}fs"
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'parent_fs_name should not be specified if fs_type is' not in metadata_out.msg"

    - name: SETUP test -> Create fs snapshot {{ auto_prefix }}fsnap of {{ auto_prefix }}fs in pool {{ auto_prefix }}pool
      infini_fs:
        name: "{{ auto_prefix }}fssnap"
        pool: "{{ auto_prefix }}pool"
        fs_type: "snapshot"
        parent_fs_name: "{{ auto_prefix }}fs"
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Get fs snapshot named {{ auto_prefix }}fssnap's nonexistent metadata key named fssnapfoo
      infini_metadata:
        object_type: "fs-snap"
        object_name: "{{ auto_prefix }}fssnap"
        key: "fssnapfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find fs-snap metadata key' not in metadata_out.msg"

    - name: POSITIVE test -> Create fs snapshot named {{ auto_prefix }}fssnap's metadata key named fssnapfoo with value fssnapbar
      infini_metadata:
        object_type: "fs-snap"
        object_name: "{{ auto_prefix }}fssnap"
        key: "fssnapfoo"
        value: "fssnapbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Create fs snapshot named {{ auto_prefix }}fssnap's metadata key named fssnapfoo with value fssnapbar again
      infini_metadata:
        object_type: "fs-snap"
        object_name: "{{ auto_prefix }}fssnap"
        key: "fssnapfoo"
        value: "fssnapbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    # Test cluster object_type

    - name: SETUP test -> Delete cluster {{ auto_prefix }}cluster to clear any metadata
      infini_cluster:
        name: "{{ auto_prefix }}cluster"
        state: absent
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: SETUP test -> Create cluster {{ auto_prefix }}cluster
      infini_cluster:
        name: "{{ auto_prefix }}cluster"
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Get cluster named {{ auto_prefix }}cluster's nonexistent metadata key named clusterfoo
      infini_metadata:
        object_type: "cluster"
        object_name: "{{ auto_prefix }}cluster"
        key: "clusterfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find cluster metadata key' not in metadata_out.msg"

    - name: POSITIVE test -> Create cluster named {{ auto_prefix }}cluster's metadata key named clusterfoo
      infini_metadata:
        object_type: "cluster"
        object_name: "{{ auto_prefix }}cluster"
        key: "clusterfoo"
        value: "clusterbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Create cluster named {{ auto_prefix }}cluster's metadata key named clusterfoo again
      infini_metadata:
        object_type: "cluster"
        object_name: "{{ auto_prefix }}cluster"
        key: "clusterfoo"
        value: "clusterbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: POSITIVE test -> Delete cluster named {{ auto_prefix }}cluster's metadata key named clusterfoo
      infini_metadata:
        object_type: "cluster"
        object_name: "{{ auto_prefix }}cluster"
        key: "clusterfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Delete cluster named {{ auto_prefix }}cluster's metadata key named clusterfoo again
      infini_metadata:
        object_type: "cluster"
        object_name: "{{ auto_prefix }}cluster"
        key: "clusterfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    # Test host object_type

    - name: SETUP test -> Delete host {{ auto_prefix }}host in pool {{ auto_prefix }}pool to clear any metadata
      infini_host:
        name: "{{ auto_prefix }}host"
        state: absent
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: SETUP test -> Create host {{ auto_prefix }}host in pool {{ auto_prefix }}pool
      infini_host:
        name: "{{ auto_prefix }}host"
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Get host named {{ auto_prefix }}host's nonexistent metadata key named hostfoo
      infini_metadata:
        object_type: "host"
        object_name: "{{ auto_prefix }}host"
        key: "hostfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find host metadata key' not in metadata_out.msg"

    - name: POSITIVE test -> Create host named {{ auto_prefix }}host's metadata key named hostfoo
      infini_metadata:
        object_type: "host"
        object_name: "{{ auto_prefix }}host"
        key: "hostfoo"
        value: "hostbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Create host named {{ auto_prefix }}host's metadata key named hostfoo again
      infini_metadata:
        object_type: "host"
        object_name: "{{ auto_prefix }}host"
        key: "hostfoo"
        value: "hostbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: POSITIVE test -> Delete host named {{ auto_prefix }}host's metadata key named hostfoo
      infini_metadata:
        object_type: "host"
        object_name: "{{ auto_prefix }}host"
        key: "hostfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: IDEMPOTENT test -> Delete host named {{ auto_prefix }}host's metadata key named hostfoo again
      infini_metadata:
        object_type: "host"
        object_name: "{{ auto_prefix }}host"
        key: "hostfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
