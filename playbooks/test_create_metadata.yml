---
# PSDEV-1108: Playbook for testing creation of metadata resources.
- hosts: localhost
  gather_facts: false  # Required for ansible_date_time
  collections:
    - infinidat.infinibox
  tasks:

    - name: SETUP test -> Create pool {{ auto_prefix }}pool
      infini_pool:
        name: "{{ auto_prefix }}pool"
        size: 1 TB
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    # Test vol object_type

    - name: NEGATIVE test -> Attempt to create a system metadata key while incorrectly providing an object_name
      infini_metadata:
        object_type: "system"
        object_name: "foo" # Error
        key: "foo"
        value: "bar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'object_name for object_type system must not be provided' not in metadata_out.msg"

    - name: NEGATIVE test -> Attempt to create a volume metadata key without providing a object_name
      infini_metadata:
        object_type: "vol"
        # object_name: "foo"
        key: "foo"
        value: "bar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'The name of the vol must be provided as object_name' not in metadata_out.msg"

    - name: NEGATIVE test -> Attempt to create a volume metadata key without providing a value
      infini_metadata:
        object_type: "vol"
        object_name: "foo"
        key: "foo"
        # value: "bar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when: 
        - "'Cannot create a' not in metadata_out.msg"
        - "'without providing a value' not in metadata_out.msg"

    - name: NEGATIVE test -> Attempt to set system metadata key ui-dataset-base2-units to something other than an boolean
      infini_metadata:
        object_type: "system"
        key: "ui-dataset-base2-units"
        value: "bar"  # Should be a boolean
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Value must be of type bool' not in metadata_out.msg"

    - name: SETUP test -> Delete volume {{ auto_prefix }}vol in pool {{ auto_prefix }}pool to clear any metadata
      infini_vol:
        name: "{{ auto_prefix }}vol"
        pool: "{{ auto_prefix }}pool"
        state: absent
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: SETUP test -> Create volume {{ auto_prefix }}vol in pool {{ auto_prefix }}pool
      infini_vol:
        name: "{{ auto_prefix }}vol"
        pool: "{{ auto_prefix }}pool"
        size: 1 GB
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Get volume named {{ auto_prefix }}vol's nonexistent metadata key named volfoo
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find vol metadata key' not in metadata_out.msg"

    - name: POSITIVE test -> Create metadata for volume {{ auto_prefix }}vol with key named volfoo with value volbar
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        value: "volbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: POSITIVE test -> Stat metadata volume {{ auto_prefix }}vol key named volfoo
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "metadata_out['value'] != 'volbar' or metadata_out['changed'] != false"

    - name: POSITIVE test -> Delete metadata volume {{ auto_prefix }}vol key named volfoo
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
    - ansible.builtin.debug:
        var: metadata_out

    - name: NEGATIVE test -> Stat nonexistent metadata volume {{ auto_prefix }}vol key named volfoo
      infini_metadata:
        object_type: "vol"
        object_name: "{{ auto_prefix }}vol"
        key: "volfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find vol metadata key' not in metadata_out.msg"

    - name: Delete volume {{ auto_prefix }}vol in pool PSUS_ANSIBLE_pool
      infini_vol:
        name: "{{ auto_prefix }}vol"
        pool: "{{ auto_prefix }}pool"
        state: absent
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    # Test system object_type

    - name: POSITIVE test -> Delete metadata system key named sysfoo
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Get nonexistent system metadata key named sysfoo
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Metadata for system with key sysfoo not found' not in metadata_out.msg"

    - name: POSITIVE test -> Create metadata system key named sysfoo with value sysbar
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        value: "sysbar"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: POSITIVE test -> Stat metadata system key named sysfoo
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out

    - name: Show system sysfoo metadata key stat output
      ansible.builtin.debug:
        var: metadata_out

    - name: POSITIVE test -> Delete metadata system key named sysfoo
      infini_metadata:
        object_type: "system"
        key: "sysfoo"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    # Test fs object_type

    - name: SETUP test -> Delete fs {{ auto_prefix }}fs in pool {{ auto_prefix }}pool to clear any metadata
      infini_fs:
        name: "{{ auto_prefix }}fs"
        pool: "{{ auto_prefix }}pool"
        state: absent
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: SETUP test -> Create fs {{ auto_prefix }}fs in pool {{ auto_prefix }}pool
      infini_fs:
        name: "{{ auto_prefix }}fs"
        pool: "{{ auto_prefix }}pool"
        size: 1 GB
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: NEGATIVE test -> Get fs named {{ auto_prefix }}fs's nonexistent metadata key named fsfoo
      infini_metadata:
        object_type: "fs"
        object_name: "{{ auto_prefix }}fs"
        key: "fsfoo"
        state: "stat"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      register: metadata_out
      failed_when:
        - "'Cannot find fs metadata key' not in metadata_out.msg"
