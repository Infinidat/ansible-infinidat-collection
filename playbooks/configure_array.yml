---
# PSDEV-1108: Create playbook automating cluster configuration mobility.
# Create three volumes: vol_nonwriteable, vol_explicitly_writable and vol_writable.
- hosts: localhost
  gather_facts: true  # Required for ansible_date_time
  collections:
    - infinidat.infinibox
  vars:
    - dataset_default_provisioning: THICK
    - table_export_limit: 3000
    - admin_user_name: admin
    - admin_user_password: 123456
    - admin_user_email: dev.mgmt@infinidat.com
    - pool_admin_user_name: Commvault
    - pool_admin_user_password: 123456
    - pool_admin_user_email: dohlemacher@infinidat.com
    - ldap_name: PSUS_ANSIBLE_ad
    - user_ldap_group_name: CO-ReadOnly
    - user_ldap_group_dn: CN=Infinidat,OU=Security Groups,OU=Groups,OU=Corp,DC=infinidat,DC=com
    - user_ldap_group_role: read_only # Choices: [admin, pool_admin, read_only]
    - network_space_name: PSUS_ANSIBLE_rep
    - setup_alerting_emails: [ "dohlemacher@infinidat.com" ]
    - prod_alerting_emails: [ "dohlemacher@infinidat.com" ]
    - alerting_event_levels: [ "INFO", "WARNING", "ERROR", "CRITICAL" ]
    - alerting_includes: []
    - alerting_excludes: [ "EVENT_FLOOD", "USER_LOGIN_SUCCESS", "USER_LOGGED_OUT" ]
  tasks:
    - name: Create temporary setup email notification rule setup_email for addresses {{ setup_alerting_emails }}
      infini_notification_rule:
        name: "setup_email"
        event_level: "{{ alerting_event_levels }}"
        include_events: "{{ alerting_includes }}" 
        exclude_events: "{{ alerting_excludes }}"
        recipients: "{{ setup_alerting_emails }}"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: Remove production email notification rule for {{ prod_alerting_emails }}
      infini_notification_rule:
        name: "production_email"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: Enable compression
      infini_config:
        config_group: "mgmt"
        key: "pool.compression_enabled_default"
        value: true
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: Set dataset default provisioning to THIN
      infini_metadata:
        object_type: "system"
        key: "ui-dataset-default-provisioning"
        value: "THIN"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"



    # TODO:
    #   David: metadata module
    #   Wei: config module

    #- name: TODO by Wei - Configure Infinibox - Set default compression to enabled
    #  # Ref: http://{{ibox2}}/api/rest/metadata
    #  # Add key: /metadata/system
    #  # Data: {"ui-dataset-default-provisioning": "THIN"}
    #  infini_config:
    #    object_type: "system"
    #    key: "ui-dataset-default-provisioning"
    #    state: "stat"
    #    user: "{{ user }}"
    #    password: "{{ password }}"
    #    system: "{{ system }}"
    #  register: metadata_out

    #- name: TODO by Wei - Show metadata stat output
    #  infini_config:
    #    var: metadata_out

    - name: Show system information
      ansible.builtin.debug:
        msg:
          - "Provisioning Infinibox {{ system }} using user {{ user }}"
          - "  Dataset default provisioning - {{ dataset_default_provisioning }}"
          - "  Table export limit - {{ table_export_limit }}"

    - name: Configure Infinibox - Set default provisioning to {{ dataset_default_provisioning }}
      infini_metadata:
        object_type: "system"
        key: "ui-dataset-default-provisioning"
        value: "{{ dataset_default_provisioning }}"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

#    - name: TODO by Wei - Configure Infinibox - Set capacity units to base 2, e.g. GiB, TiB
#      # Ref: http://{{ibox2}}/api/rest/metadata
#      # ui-dataset-base2-units
#      infini_config:
#        msg: (1) Set capacity units

    - name: Configure Infinibox - Set maximum export rows to {{ table_export_limit }}
      infini_metadata:
        object_type: "system"
        key: "ui-table-export-limit"
        value: "{{ table_export_limit }}"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: Configure Infinibox - Setup Active Directory
      infini_users_repository:
        name: "{{ ldap_name }}"
        bind_password: "tuFrAxahuYe4"
        bind_username: "conldap"
        ad_domain_name: "infinidat.com"
        repository_type: "ActiveDirectory"
        schema_group_class: "group"
        schema_group_memberof_attribute: "memberof"
        schema_group_name_attribute: "cn"
        schema_groups_basedn: ""
        schema_user_class: "user"
        schema_username_attribute: "sAMAccountName"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: Configure 'CO-ReadOnly' user group
      infini_user:
        user_ldap_group_name: "{{ user_ldap_group_name }}"
        user_ldap_group_dn: "{{ user_ldap_group_dn }}"
        user_ldap_group_ldap: "{{ ldap_name }}"
        user_ldap_group_role: "{{ user_ldap_group_role }}"
        #user_group_pools: ""
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
#
#    - name: TODO by David - Test Infinibox - Test LDAP
#      ansible.builtin.debug:
#        msg: (4) Test LDAP
#
#    - name: TODO by David - Test Infinibox - Test LDAP roles
#      ansible.builtin.debug:
#        msg: (4) Test LDAP roles
#
    - name: Set up an admin user
      infini_user:
        user_name: "{{ admin_user_name }}"
        user_email: "{{ admin_user_email }}"
        user_password: "{{ admin_user_password }}"
        user_role: "admin"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"


#    - name: TODO by Wei - Configure Infinibox - Temporarily setup alerting email
#      # Ref: http://{{ibox2}}/api/rest/notification/targets
#      ansible.builtin.debug:
#        msg: (6) Create event rule to send email to TEO-Engineering-Alerts@jackhenry.com
#
#    - name: TODO by Wei - Test Infinibox - Test temporarily  alerting
#      ansible.builtin.debug:
#        msg: (6) Create test event
#
#    - name: TODO by Wei - Configure Infinibox - Define syslog from list
#      # Ref: http://{{ibox2}}/api/rest/notification/targets
#      ansible.builtin.debug:
#        msg: (7) Configure syslogs
#
#    - name: TODO by Wei - Configure Infinibox - Create syslogs
#      ansible.builtin.debug:
#        msg: (7) Create syslogs
#
#    - name: Done - Configure Infinibox - Create network space
#      infini_network_space:
#        msg: (8) Create network space

 #   - name: 8 -> Create {{ network_space_service }} network space named {{ network_space_name }}
 #     infini_network_space:
 #       name: "{{ network_space_name }}"
 #       state: present
 #       interfaces:
 #         - PG1
 #         - PG1
 #         - PG1
 #       service: "Replication"
 #       netmask: 19
 #       network: 172.31.32.0
 #       default_gateway: 172.31.63.254
 #       # rate_limit: 8
 #       # mtu: 1280
 #       ips:
 #         - 172.31.32.145
 #         - 172.31.32.146
 #         - 172.31.32.147
 #         - 172.31.32.148
 #         - 172.31.32.149
 #         - 172.31.32.150
 #       user: "{{ user }}"
 #       password: "{{ password }}"
 #       system: "{{ system }}"

#
#    - name: TODO by David - Configure Infinimentrics - Add Infinibox
#      ansible.builtin.debug:
#        msg: (9) Add Infinibox to Infinimetrics
#
    - name: Create pools
      infini_pool:
        name: "{{ item }}"
        size: 10GB
        vsize: 10GB
        state: present
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"
      loop:
        - pool-a
        - pool-b
        - pool-c

    - name: Set up pool admin user
      infini_user:
        user_name: "{{ pool_admin_user_name }}"
        user_email: "{{ pool_admin_user_email }}"
        user_password: "{{ pool_admin_user_password }}"
        user_role: "pool_admin"
        user_pool: "pool-a"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"



#
#
#
#
#
#
#    - name: Configure Infinibox - Label fibre channel switches
#      # Ref: http://{{ibox2}}/api/rest/fc/switches/{ID}
#      ansible.builtin.debug:
#        msg: (11) Rename fibre channel switches using names listed in file 
#
#    - name: Test Infinibox - Test labels fibre channel switches
#      ansible.builtin.debug:
#        msg: (11) Test renamed fibre channel switches. Validate WWN in BNA
#
#    # Ensure that JHA CA Certificate is installed by remote support 
#    - name: Configure Infinibox - Update management SSL certificate
#      # Ref: https://wiki.infinidat.com/display/TWDRAFTS/.Config+System+SSL+Certificate+commands+vPUBLISHED
#      # Ref: http://{{ibox2}}/api/rest/system/certificates
#      ansible.builtin.debug:
#        msg: (12) Update management SSL certificate
#
#    - name: Configure Infinibox - Update SA SSL certificate
#      ansible.builtin.debug:
#        msg: (12) Update SA SSL certificate
#
#    - name: Configure Infinibox - Setup alerting production email
#      ansible.builtin.debug:
#        msg: (13) Create event rule to send email to Alerts-CorpSystemsStorage@jackhenry.com

    - name: Create production email notification rule production_email for addresses {{ prod_alerting_emails }}
      infini_notification_rule:
        name: "production_email"
        event_level: "{{ alerting_event_levels }}"
        include_events: "{{ alerting_includes }}" 
        exclude_events: "{{ alerting_excludes }}"
        recipients: "{{ prod_alerting_emails }}"
        state: "present"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

    - name: Remove setup email notification rule for {{ setup_alerting_emails }}
      infini_notification_rule:
        name: "setup_email"
        state: "absent"
        user: "{{ user }}"
        password: "{{ password }}"
        system: "{{ system }}"

#
#    - name: Configure Infinibox - Remove temporarily alerting email
#      ansible.builtin.debug:
#        msg: (13) Remove event rule to send email to TEO-Engineering-Alerts@jackhenry.com
#
#    - name: Test Infinibox - Test production alerting
#      ansible.builtin.debug:
#        msg: (13) Create test event
#
#    - name: Configure Infinibox - Notify TS-Storage that system is complete and ready for use
#      ansible.builtin.debug:
#        msg: (14) Send event - System is complete and ready for use
