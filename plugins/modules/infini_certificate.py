#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: (c) 2024, Infinidat <info@infinidat.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function

__metaclass__ = type

DOCUMENTATION = r"""
---
module: infini_certificate
version_added: '2.16.2'
short_description:  Create (present state) or clear (absent state) SSL certificates on Infinibox
description:
    - This module uploads (present state) or clears (absent state) SSL certificates on Infinibox
author: David Ohlemacher (@ohlemacher)
options:
  certificate_file_name:
    description:
      - Name with full path of a certificate file.
    required:  false
  state:
    description:
      - Creates/Modifies the systems SSL certificate by uploading one from a file, when using state present.
      - For state absent, the current certificate is removed and a new self-signed certificate is automatically generated by the IBOX.
      - State stat shows the existing certificate's details.
    required: false
    default: present
    choices: [ "stat", "present", "absent" ]
extends_documentation_fragment:
    - infinibox
"""

EXAMPLES = r"""
- name: Upload SSL certificate from file
  infini_certificate:
    certificate_file_name: cert.crt
    state: present
    user: admin
    password: secret
    system: ibox001

- name: State SSL certificate
  infini_certificate:
    state: stat
    user: admin
    password: secret
    system: ibox001

- name: Clear SSL certificate
  infini_certificate:
    state: absent
    user: admin
    password: secret
    system: ibox001
"""

# RETURN = r''' # '''

from ansible.module_utils.basic import AnsibleModule, missing_required_lib

import traceback

from ansible_collections.infinidat.infinibox.plugins.module_utils.infinibox import (
    HAS_INFINISDK,
    ObjectNotFound,
    api_wrapper,
    merge_two_dicts,
    get_system,
    infinibox_argument_spec,
    fail,
    success,
)

try:
    from infinisdk.core.exceptions import APICommandFailed
    from infinisdk.core.exceptions import ObjectNotFound
    from infi.dtypes.iqn import make_iscsi_name
except ImportError:
    pass  # Handled by HAS_INFINISDK from module_utils


def handle_stat(module):
    path = f"system/certificates"
    system = get_system(module)
    try:
        cert_result = system.api.get(path=path).get_result()[0]
    except APICommandFailed as err:
        msg = f"Cannot stat."
        fail(module, msg=msg)
    result = dict(
        changed=False,
        msg="Certficate stat found"
    )
    result = merge_two_dicts(result, cert_result)
    module.exit_json(**result)


def handle_present(module):
    certificate_file_name = module.params['certificate_file_name']
    path = f"system/certificates"
    system = get_system(module)
    try:
        try:
            files = {'file': open(certificate_file_name, 'rb')}
        except FileNotFoundError:
            module.fail_json(msg=f"Cannot find certificate file named {certificate_file_name}")
        except Exception as err:
            module.fail_json(msg=f"Cannot open certificate file named {certificate_file_name}: {err}")
        cert_result = system.api.post(path=path, files=files).get_result()
    except APICommandFailed as err:
        msg = f"Cannot upload cert: {err}"
        fail(module, msg=msg)

    cert_serial       = cert_result['certificate']['serial_number']
    cert_issued_by_cn = cert_result['certificate']['issued_by']['CN']
    cert_issued_to_cn = cert_result['certificate']['issued_to']['CN']
    result = dict(
        changed=True,
        msg="System certificate uploaded successfully. " + \
        f"Certificate S/N {cert_serial} issued by CN {cert_issued_by_cn} to CN {cert_issued_to_cn}"
    )
    result = merge_two_dicts(result, cert_result)
    module.exit_json(**result)


def handle_absent(module):
    fail(module, msg="Not implemented: handle_absent()")


def execute_state(module):
    """Handle states"""
    state = module.params["state"]
    try:
        if state == "stat":
            handle_stat(module)
        elif state == "present":
            handle_present(module)
        elif state == "absent":
            handle_absent(module)
        else:
            fail(module, msg=f"Internal handler error. Invalid state: {state}")
    finally:
        system = get_system(module)
        system.logout()


def check_options(module):
    """Verify module options are sane"""
    certificate_file_name = module.params["certificate_file_name"]
    state = module.params["state"]

    if state in ["stat", "absent"]:
        pass
    if state in ["present"]:
        if not certificate_file_name:
            msg = "Certificate file name parameter must be provided"
            fail(module, msg=msg)


def main():
    argument_spec = infinibox_argument_spec()
    argument_spec.update(
        dict(
            certificate_file_name=dict(required=False, default=None),
            state=dict(default="present", choices=["stat", "present", "absent"]),
        )
    )

    module = AnsibleModule(argument_spec, supports_check_mode=True)

    check_options(module)
    execute_state(module)


if __name__ == "__main__":
    main()
